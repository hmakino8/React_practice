import React from "react";
import { initializeTodoInfo } from "../utils/utils";
import * as Style from "../style/styleInputForm";

const CreateInputForm = ({ titleName, todoInfo, setTodoInfo }) => {
  const handleOnChange = (e) => {
    const { name, value } = e.target;

    setTodoInfo((prevTodoInfo) => ({
      ...prevTodoInfo,
      [name]: value,
    }));
  };

  const commonProps = {
    id: titleName,
    name: titleName,
    value: todoInfo[titleName] || "",
    onChange: handleOnChange,
  };

  switch (titleName) {
    case "title":
      return (
        <div style={Style.inputForm}>
          <label style={Style.label}>{titleName}</label>
          <input type="text" {...commonProps} />
        </div>
      );
    case "priority":
      return (
        <div style={{ ...Style.inputForm, ...Style.priority }}>
          <label style={Style.label}>{titleName}</label>
          <select {...commonProps}>
            <option value="" disabled>
              選択してください
            </option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>
        </div>
      );
    case "deadline":
      return (
        <div style={Style.inputForm}>
          <label style={Style.label}>{titleName}</label>
          <input type="datetime-local" {...commonProps} />
        </div>
      );
    case "comment":
      return (
        <div style={Style.inputForm}>
          <label style={Style.label}>{titleName}</label>
          <textarea {...commonProps} />
        </div>
      );
    default:
      return null;
  }
};

export const InputForm = (props) => {
  const { setTodos, todoInfo, setTodoInfo, setIsModalOpen } = props;

  const addTodo = () => {
    setTodos((prevTodos) => [...prevTodos, todoInfo]);
    // Add Taskを押した時に前回の入力が残らないようtodoInfoをリセット
    setTodoInfo(initializeTodoInfo());
    setIsModalOpen(false);
  };

  const editTodo = () => {
    setTodos((prevTodos) => {
      const newTodos = prevTodos.map((prevTodo) => {
        if (prevTodo.id === todoInfo.id) {
          return { ...todoInfo };
        } else {
          return prevTodo;
        }
      });
      return newTodos;
    });

    setIsModalOpen(false);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  return (
    <>
      <div>
        <CreateInputForm
          titleName="title"
          todoInfo={todoInfo}
          setTodoInfo={setTodoInfo}
        />
        <div style={Style.priorityAndDeadline}>
          <CreateInputForm
            titleName="priority"
            todoInfo={todoInfo}
            setTodoInfo={setTodoInfo}
          />
          <CreateInputForm
            titleName="deadline"
            todoInfo={todoInfo}
            setTodoInfo={setTodoInfo}
          />
        </div>
        <CreateInputForm
          titleName="comment"
          todoInfo={todoInfo}
          setTodoInfo={setTodoInfo}
        />
        <button onClick={closeModal}>Close</button>
        {todoInfo.isNew ? (
          <button onClick={addTodo}>Add Task</button>
        ) : (
          <button onClick={editTodo}>Done</button>
        )}
      </div>
    </>
  );
};
import React from "react";
import { InputForm } from "./InputForm";
import { initializeTodoInfo } from "../utils/utils";
import * as Style from "../style/styleModal";
import "../style/styles.css";

const Tasks = (props) => {
  const { setIsModalOpen, setTodoInfo } = props;

  return (
    <div style={Style.tasks}>
      <p style={Style.tasksParagraph}>Tasks</p>
      <button
        className="tasksButtonAdd"
        style={Style.tasksButtonAdd}
        onClick={() => {
          setTodoInfo(initializeTodoInfo());
          setIsModalOpen(true);
        }}
      >
        <i className="fa-solid fa-square-plus">　</i>
        Add Task
      </button>
    </div>
  );
};

const ModalContents = (props) => {
  const { setTodos, todoInfo, setTodoInfo, isModalOpen, setIsModalOpen } =
    props;

  return (
    <>
      {isModalOpen && (
        <div style={Style.modal} onClick={() => setIsModalOpen(false)}>
          <div style={Style.modalContent} onClick={(e) => e.stopPropagation()}>
            {todoInfo.isNew ? <h2>Task Details</h2> : <h2>Edit</h2>}
            <InputForm
              setTodos={setTodos}
              todoInfo={todoInfo}
              setTodoInfo={setTodoInfo}
              setIsModalOpen={setIsModalOpen}
            />
          </div>
        </div>
      )}
    </>
  );
};

export const Modal = (props) => {
  const { setTodos, todoInfo, setTodoInfo, isModalOpen, setIsModalOpen } =
    props;

  return (
    <>
      <Tasks setIsModalOpen={setIsModalOpen} setTodoInfo={setTodoInfo} />
      <ModalContents
        setTodos={setTodos}
        todoInfo={todoInfo}
        setTodoInfo={setTodoInfo}
        isModalOpen={isModalOpen}
        setIsModalOpen={setIsModalOpen}
      />
    </>
  );
};
import { useState } from "react";
import { Modal } from "./Modal";
import { TodoList } from "./TodoList";
import { initializeTodoInfo } from "../utils/utils";
import * as Style from "../style/styleTodo";

export const Todo = () => {
  const [todos, setTodos] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [todoInfo, setTodoInfo] = useState(initializeTodoInfo());

  return (
    <div style={Style.todoContainer}>
      <div style={Style.todoWrapper}>
        <div style={Style.contentsWrapper}>
          <h1 className="title" style={Style.todoTitle}>
            Todo App
          </h1>
          <Modal
            setTodos={setTodos}
            todoInfo={todoInfo}
            setTodoInfo={setTodoInfo}
            isModalOpen={isModalOpen}
            setIsModalOpen={setIsModalOpen}
          />
          <TodoList
            todos={todos}
            setTodos={setTodos}
            setTodoInfo={setTodoInfo}
            setIsModalOpen={setIsModalOpen}
          />
        </div>
      </div>
    </div>
  );
};
import React from "react";
import { formatDate } from "../utils/utils";
import * as Style from "../style/styleTodoList";

const ContentsIncomplete = (props) => {
  const { index, todo, setTodoInfo, handleOnChange, setIsModalOpen } = props;

  return (
    <div style={Style.task}>
      <input
        type="checkbox"
        style={{ marginRight: "15px" }}
        onChange={(e) => {
          handleOnChange(e, index);
        }}
      ></input>
      <div style={{ width: "60%" }}>{todo.title}</div>
      <div style={{ width: "40%" }}>
        <i
          className="fa-regular fa-calendar-days"
          style={{ marginRight: "10px" }}
        ></i>
        {formatDate(todo.deadline)}
      </div>
      <i
        className="fa-duotone fa-solid fa-pen-to-square"
        style={{ marginRight: "10px" }}
        onClick={() => {
          setTodoInfo(() => ({ ...todo, isNew: false }));
          setIsModalOpen(true);
        }}
      ></i>
      {todo.priority === "Medium" && (
        <div style={{ ...Style.priority, backgroundColor: "yellow" }}></div>
      )}
      {todo.priority === "High" && (
        <div style={{ ...Style.priority, backgroundColor: "red" }}></div>
      )}
      {todo.priority === "Low" && (
        <div style={{ ...Style.priority, backgroundColor: "gray" }}></div>
      )}
    </div>
  );
};

const ContentsComplete = (props) => {
  const { todo, index, handleOnChange } = props;

  return (
    <>
      <div style={Style.task}>
        <input
          type="checkbox"
          defaultChecked={true}
          style={{ marginRight: "15px" }}
          onChange={(e) => {
            handleOnChange(e, index);
          }}
        ></input>
        <div style={{ width: "80%" }}>{todo.title}</div>
        <div style={{ width: "20%" }}>{formatDate(todo.deadline)}</div>
        {todo.priority === "Medium" && (
          <div style={{ ...Style.priority, backgroundColor: "yellow" }}></div>
        )}
        {todo.priority === "High" && (
          <div style={{ ...Style.priority, backgroundColor: "red" }}></div>
        )}
        {todo.priority === "Low" && (
          <div style={{ ...Style.priority, backgroundColor: "gray" }}></div>
        )}
      </div>
    </>
  );
};

export const TodoList = (props) => {
  const { todos, setTodos, setTodoInfo, setIsModalOpen } = props;

  // チェックボックスによる完了、未完了のトグル
  const handleOnChange = (e, index) => {
    setTodos((prevTodos) =>
      prevTodos.map((prevTodo, prevTodoIndex) =>
        prevTodoIndex === index
          ? { ...prevTodo, isComplete: e.target.checked }
          : prevTodo
      )
    );
  };

  return (
    <div style={Style.listContentsWrapper}>
      {todos.length === 0 ? (
        <p style={Style.listNoData}>No data to display</p>
      ) : (
        <>
          <div style={Style.listContentsIncomplete}>
            {todos.map((todo, index) => (
              <React.Fragment key={index}>
                {!todo.isComplete && (
                  <ContentsIncomplete
                    index={index}
                    todo={todo}
                    setTodoInfo={setTodoInfo}
                    handleOnChange={handleOnChange}
                    setIsModalOpen={setIsModalOpen}
                  />
                )}
              </React.Fragment>
            ))}
          </div>
          <div style={Style.listContentsComplete}>
            <p style={{ fontSize: "0.6rem", margin: "auto" }}>Completed</p>
            {todos.map((todo, index) => (
              <React.Fragment key={index}>
                {todo.isComplete && (
                  <ContentsComplete
                    todo={todo}
                    index={index}
                    handleOnChange={handleOnChange}
                  />
                )}
              </React.Fragment>
            ))}
          </div>
        </>
      )}
    </div>
  );
};
const style = {
  color: "white",
  margin: "10px auto 80px",
  padding: "25px",
  textAlign: "center",
  borderRadius: "3px",
  boxShadow: "0 4px 8px black",
  backgroundColor: "green",
};

export const TodoTitle = () => {
  return (
    <h1 className="title" style={style}>
      Todo App
    </h1>
  );
};
import React from "react";

export const TodoItem = ({ todo, toggleTodo, deleteTodo }) => {
  return (
    <li className={todo.completed ? "completed" : ""}>
      {todo.text}
      <div>
        <button onClick={toggleTodo}>
          {todo.completed ? "Undo" : "Complete"}
        </button>
        <button onClick={deleteTodo}>Delete</button>
      </div>
    </li>
  );
};
export const inputForm = {
  display: "flex",
  flexFlow: "column",
  width: "100%",
  marginBottom: "20px",
};

export const label = {
  marginBottom: "5px",
};

export const priorityAndDeadline = {
  display: "flex",
};

export const priority = {
  marginRight: "20px",
};

export const deadline = {
  width: "100%",
};
export const tasks = {
  display: "flex",
};

export const tasksParagraph = {
  fontWeight: "bold",
};

export const tasksButtonAdd = {
  border: "none",
  backgroundColor: "green",
  color: "white",
  fontWeight: "lighter",
  width: "120px",
  height: "35px",
  fontSize: "12.5px",
  borderRadius: "3px",
  marginLeft: "auto",
};

export const modal = {
  /* display: none; デフォルトでは非表示 */
  position: "fixed" /* スクロールしてもモーガルが画面上に固定 */,
  zIndex: "1" /* 要素が重なった際の前後関係 */,
  left: "0",
  top: "0",
  width: "100%",
  height: "100%",
  backgroundColor: "rgba(0, 0, 0, 0.5)" /*背景の半透明*/,
};

export const modalContent = {
  backgroundColor: "#fff",
  margin: "15% auto",
  padding: "20px",
  border: "1px solid #888",
  width: "80%",
  maxWidth: "400px",
  borderRadius: "10px",
};
export const todoTitle = {
  color: "white",
  margin: "10px auto 80px",
  padding: "25px",
  textAlign: "center",
  borderRadius: "3px",
  boxShadow: "0 4px 8px black",
  backgroundColor: "green",
};

export const todoContainer = {
  display: "flex",
};

export const todoWrapper = {
  display: "flex",
  flexDirection: "column",
  margin: "10px auto auto",
  width: "800px",
  height: "1000px",
  backgroundColor: "#f4f4f4",
  borderRadius: "10px",
};

export const contentsWrapper = {
  width: "80%",
  height: "80%",
  margin: "0 auto",
};
export const listContentsWrapper = {
  display: "flex",
  height: "90%",
  backgroundColor: "white",
  borderRadius: "3px",
  boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
  border: "1px solid, rgb(220, 220, 220",
  flexDirection: "column",
  fontSize: "0.6rem",
  alignItems: "center",
};

export const listContentsComplete = {
  height: "28%",
  width: "93%",
  backgroundColor: "white",
  borderRadius: "3px",
  boxShadow: "0 1px 2px rgba(0, 0, 0, 0.1)",
  border: "1px solid, rgb(250, 250, 250",
  margin: "2px auto",
};

export const listContentsIncomplete = {
  height: "72%",
  width: "93%",
  backgroundColor: "white",
  borderRadius: "3px",
  boxShadow: "0 1px 2px rgba(0, 0, 0, 0.1)",
  border: "1px solid, rgb(250, 250, 250",
  margin: "2px auto",
};

export const listNoData = {
  display: "flex",
  fontSize: "0.5rem",
  margin: "auto",
  border: "1px solid rgb(240, 240, 240)",
  width: "95%",
  height: "95%",
  justifyContent: "center",
  alignItems: "center",
};

export const task = {
  display: "flex",
  height: "1.7rem",
  margin: "5px 1px",
  borderRadius: "3px",
  boxShadow: "0 1.6px 1px rgba(0, 0, 0, 0.1)",
  border: "1.2px solid, rgb(220, 220, 220",
  alignItems: "center",
};

export const priority = {
  padding: "8px",
  marginRight: "5px",
  borderRadius: "10px",
};
p,
label {
  color: rgb(80, 80, 80);
}

.tasksButtonAdd:hover {
  cursor: pointer;
  opacity: 0.7;
}

input,
textarea,
select {
  outline: none;
  border: 1px solid rgb(200, 200, 200);
  border-radius: 3px;
}

input:focus,
textarea:focus,
select:focus {
  outline: none;
  border: 1px solid green;
}

input:not(:focus):hover,
textarea:not(:focus):hover,
select:not(:focus):hover {
  outline: none;
  border: 1px solid rgb(150, 150, 150);
}
export const initializeTodoInfo = () => ({
  title: "",
  priority: "",
  deadline: "",
  comments: "",
  isComplete: false,
  isNew: true,
});

export const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toDateString();
};
